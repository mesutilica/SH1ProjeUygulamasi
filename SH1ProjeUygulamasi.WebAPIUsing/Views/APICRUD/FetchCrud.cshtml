
@{
    ViewData["Title"] = "Javascript FetchApi ile Ürün CRUD İşlemleri";
}

<h1>@ViewBag.Title</h1>

<!-- Button trigger modal -->
<button type="button" class="btn btn-primary mb-2" data-bs-toggle="modal" data-bs-target="#urunFormu">
    Yeni Ekle
</button>

<table class="table table-striped table-hover">
    <tr>
        <th>Id</th>
        <th>Ürün Resmi</th>
        <th>Ürün Adı</th>
        <th>Fiyat</th>
        <th>Stok</th>
        <th>Eklenme Tarihi</th>
        <th>Durum</th>
        <th></th>
    </tr>
    <tbody id="products"></tbody>
</table>

<input type="hidden" id="Id" />
<input type="hidden" name="CreateDate" />
<input type="hidden" id="ImageName" />

<!-- Modal -->
<div class="modal fade" id="urunFormu" tabindex="-1" aria-labelledby="urunFormuLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">Ürün Bilgileri</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-12">
                        <div>
                            <div class="form-group">
                                <label class="control-label" for="Name">Ürün Adı</label>
                                <input class="form-control" type="text" data-val="true" data-val-length="The field Ürün Adı must be a string with a maximum length of 50." data-val-length-max="50" data-val-required="Ürün Adı Boş Geçilemez!" id="Name" maxlength="50" name="Name" value="">
                                <span class="text-danger field-validation-valid" data-valmsg-for="Name" data-valmsg-replace="true"></span>
                            </div>
                            <div class="form-group">
                                <label class="control-label" for="Description">Ürün Açıklama</label>
                                <textarea class="form-control" id="Description" name="Description"></textarea>
                                <span class="text-danger field-validation-valid" data-valmsg-for="Description" data-valmsg-replace="true"></span>
                            </div>
                            <div class="form-group">
                                <label class="control-label" for="Image">Ürün Resmi</label>
                                <input class="form-control" type="file" data-val="true" data-val-length="The field Ürün Resmi must be a string with a maximum length of 100." data-val-length-max="100" id="Image" name="Image">
                                <div id="resim"></div>
                                <span class="text-danger field-validation-valid" data-valmsg-for="Image" data-valmsg-replace="true"></span>
                            </div>
                            <div class="form-group form-check">
                                <label class="form-check-label">
                                    <input class="form-check-input" type="checkbox" data-val="true" data-val-required="The Durum field is required." id="IsActive" name="IsActive" value="true"> Durum
                                </label>
                            </div>
                            <div class="form-group form-check">
                                <label class="form-check-label">
                                    <input class="form-check-input" type="checkbox" data-val="true" data-val-required="The Anasayfa field is required." id="IsHome" name="IsHome" value="true"> Anasayfa
                                </label>
                            </div>
                            <div class="form-group">
                                <label class="control-label" for="Stock">Stok</label>
                                <input class="form-control" min="0" type="number" data-val="true" data-val-required="Stok Boş Geçilemez!" id="Stock" name="Stock" value=""><input name="__Invariant" type="hidden" value="Stock">
                                <span class="text-danger field-validation-valid" data-valmsg-for="Stock" data-valmsg-replace="true"></span>
                            </div>
                            <div class="form-group">
                                <label class="control-label" for="Price">Fiyat</label>
                                <input class="form-control" type="text" data-val="true" data-val-number="The field Fiyat must be a number." data-val-required="Fiyat Boş Geçilemez!" id="Price" name="Price" value="">
                                <span class="text-danger field-validation-valid" data-valmsg-for="Price" data-valmsg-replace="true"></span>
                            </div>
                            <div class="form-group">
                                <label class="control-label" for="CategoryId">Kategori</label>
                                <select class="form-select" data-val="true" data-val-required="The Kategori field is required." id="CategoryId" name="CategoryId">
                                    <option>Seçiniz</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label class="control-label" for="BrandId">Marka</label>
                                <select class="form-select" id="BrandId" name="BrandId">
                                    <option>Seçiniz</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Vazgeç</button>

                <input type="button" value="Ekle" id="btnEkle" class="btn btn-primary" onclick="Ekle()">
                <input type="button" value="Güncelle" class="btn btn-success" onclick="Guncelle()" id="btnGuncelle" disabled>
            </div>
        </div>
    </div>
</div>



@section scripts{
    <script>
        var apiUrl = 'http://localhost:5018/Api/';
        function GetAll() {
            fetch(apiUrl + 'Products')
                .then(response => response.json()) // JSON olarak dönüştür
                .then(data => {
                    // console.log(data);
                    let liste = document.getElementById("products");
                    liste.innerHTML = "";
                    data.forEach(item => {
                        liste.innerHTML += `<tr>
                                        <td>${item.id}</td>
                                        <td><img src="http://localhost:5018/Images/${item.image}" alt="" height="34" /></td>
                                        <td>${item.name}</td>
                                        <td>${item.price}</td>
                                        <td>${item.stock}</td>
                                        <td>${item.createDate}</td>
                                        <td>${item.isActive}</td>
                                        <td>
                                        <button class="btn btn-primary" onclick="edit(${item.id})" data-bs-toggle="modal" data-bs-target="#urunFormu">Düzenle</button>
                                        <button class="btn btn-danger" onclick="Delete(${item.id})">Sil</button>
                                        </td>
                                    </tr>`;
                    });
                })
                .catch(error => {
                    console.log(error);
                })
        };
        GetAll();
        GetCategories();
        GetBrands();

        // kategoriler
        function GetCategories() {
            fetch(apiUrl + 'categories')
                .then(response => response.json()) // JSON olarak dönüştür
                .then(data => {
                    // console.log(data);
                    let liste = document.getElementById("CategoryId");
                    data.forEach(item => {
                        let option = new Option(item.name, item.id);
                        liste.add(option);
                    });
                })
                .catch(error => {
                    console.log(error);
                })
        };

        // markalar
        function GetBrands() {
            fetch(apiUrl + 'brands')
                .then(response => response.json()) // JSON olarak dönüştür
                .then(data => {
                    // console.log(data);
                    let liste = document.getElementById("BrandId");
                    data.forEach(item => {
                        let option = new Option(item.name, item.id);
                        liste.add(option);
                    });
                })
                .catch(error => {
                    console.log(error);
                })
        };


        // file upload
        async function upload(formData) {
            try {
                const response = await fetch(apiUrl + "Upload", {
                    method: "POST",
                    body: formData,
                });
                const result = await response.json();
                console.log("Success:", result);
            } catch (error) {
                console.error("Error:", error);
            }
        }

        function Ekle() {
            if (!document.getElementsByName('Name')[0].value) {
                alert("Ürün Adı Boş Geçilemez!");
                return;
            }
            if (!document.getElementById('Stock').value) {
                alert("Stok Boş Geçilemez!");
                return;
            }
            if (!document.getElementById('Price').value) {
                alert("Fiyat Boş Geçilemez!");
                return;
            }
            // file upload
            const formData = new FormData();
            const fileField = document.querySelector('input[type="file"]');

            formData.append("formFile", fileField.files[0]);

            fetch(apiUrl + 'Products/', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    Name: document.getElementsByName('Name')[0].value,
                    Description: document.getElementsByName('Description')[0].value,
                    Price: document.getElementById('Price').value,
                    Stock: document.getElementById('Stock').value,
                    IsHome: document.getElementById('IsHome').checked,
                    IsActive: document.querySelector('[name="IsActive"]').checked,
                    Image: formData.get('formFile').name,
                    CategoryId: document.getElementById('CategoryId').value,
                    BrandId: document.getElementById('BrandId').value
                })
            }).then((response) => {
                if (response.ok) {
                    upload(formData);
                    location.reload()
                    // return response.json(); // Başarılı ise JSON verisini alın
                } else {
                    throw new Error('İstek başarısız oldu.'); // Hata durumunda hata fırlatın
                }
            }).catch(error => {
                console.log(error);
            })
        }

        function edit(id) {
            fetch(apiUrl + "Products/" + id)
                .then(response => response.json())
                .then(item => {
                    console.log(item);
                    document.getElementById("Id").value = item.id;
                    document.getElementById("Name").value = item.name;
                    document.getElementById("Description").value = item.description;
                    document.getElementById("Stock").value = item.stock;
                    document.getElementById("Price").value = item.price;
                    document.getElementById("CategoryId").value = item.categoryId;
                    document.getElementById("BrandId").value = item.brandId;
                    document.getElementById("ImageName").value = item.image;
                    document.getElementById("IsActive").checked = item.isActive;
                    document.getElementById("IsHome").checked = item.isHome;
                    document.getElementById("resim").innerHTML = "<img src='http://localhost:5018/Images/" + item.image + "' height='50'>";
                    document.getElementById("btnGuncelle").disabled = false;
                })
                .catch(error => {
                    console.log(error);
                })
        }

        function Guncelle() {
            var id = document.getElementById("Id").value;
            var resim = document.getElementById("ImageName").value;

            if (!document.getElementsByName('Name')[0].value) {
                alert("Ürün Adı Boş Geçilemez!");
                return;
            }
            if (!document.getElementById('Stock').value) {
                alert("Stok Boş Geçilemez!");
                return;
            }
            if (!document.getElementById('Price').value) {
                alert("Fiyat Boş Geçilemez!");
                return;
            }
            // file upload
            const formData = new FormData();
            const fileField = document.querySelector('input[type="file"]');

            formData.append("formFile", fileField.files[0]);

            if (fileField.files[0]) {
                resim = formData.get("formFile").name
            }

            fetch(apiUrl + 'Products/' + id, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    Id: parseInt(id),
                    Name: document.getElementsByName('Name')[0].value,
                    Description: document.getElementsByName('Description')[0].value,
                    Price: document.getElementById('Price').value,
                    Stock: document.getElementById('Stock').value,
                    IsHome: document.getElementById('IsHome').checked,
                    IsActive: document.querySelector('[name="IsActive"]').checked,
                    Image: resim,
                    CategoryId: document.getElementById('CategoryId').value,
                    BrandId: document.getElementById('BrandId').value
                })
            }).then((response) => {
                if (response.ok) {
                    upload(formData);
                    location.reload()
                    // return response.json(); // Başarılı ise JSON verisini alın
                } else {
                    throw new Error('İstek başarısız oldu.'); // Hata durumunda hata fırlatın
                }
            }).catch(error => {
                console.log(error);
            })
        }

        function Delete(id) {
            if (confirm('Kaydı silmek istediğinize emin misiniz?')) {
                fetch(apiUrl + 'Products/' + id, {
                    method: 'DELETE'
                }).then((response) => {
                    if (response.ok) {
                        location.reload()
                    } else {
                        throw new Error('İstek başarısız oldu.'); // Hata durumunda hata fırlatın
                    }
                }).catch(error => {
                    console.log(error);
                })
            }
        }
    </script>
}